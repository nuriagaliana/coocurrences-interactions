occupancy <- rbind(occupancy, cur_data)
}
}
number_sites <- NULL
for(sp in unique(occupancy$species)){
cur_sp <- occupancy[occupancy$species==sp,]
num_sites <- length(cur_sp$site)
cur_data <- data.frame(species=sp,trophic_level=cur_sp$trophic_level,sites=num_sites)
if(is.null(number_sites)){
number_sites <- cur_data
}else{
number_sites <- rbind(number_sites, cur_data)
}
}
number_sites <- unique(number_sites[number_sites$sites!=0,])
number_sites_pred <- number_sites[number_sites$trophic_level=='consumer',]
number_sites_prey <- number_sites[number_sites$trophic_level=='resource',]
## create metaweb for each interaction type
mut_raw$dummy = 1
mut_meta = frame2webs(mut_raw, varnames=c("P.Genus.Species","Genus.Species","dummy"))[[1]]
sum(mut_meta)
## Calculating total number of interactions per species (of the higher trophic level)
metaweb <- graph_from_incidence_matrix(mut_meta, directed=T, mode='out')
number_interactions_pred <- as.data.frame(igraph::degree(metaweb, V(metaweb)[which(V(metaweb)$type == TRUE)]$name, mode='in'))
number_interactions_pred <- tibble::rownames_to_column(number_interactions_pred, "species")
number_interactions_pred <- setNames(number_interactions_pred, c("species","interactions"))
number_interactions_prey <- as.data.frame(igraph::degree(metaweb, V(metaweb)[which(V(metaweb)$type == FALSE)]$name, mode='out'))
number_interactions_prey <- tibble::rownames_to_column(number_interactions_prey, "species")
number_interactions_prey <- setNames(number_interactions_prey, c("species","interactions"))
number_interactions <- rbind(number_interactions_pred, number_interactions_prey)
real_interactions <- as.data.frame(get.edgelist(metaweb))
real_interactions <- setNames(real_interactions, c("resource","consumer"))
site_interaction <- merge(number_interactions, number_sites, by="species")
# We calculate the number of times two species itneract relative to the number of times they co-occur
output_prop.inter <- NULL
output_site.inter <- NULL
for(con in unique(real_interactions$consumer)){
cur_sp <- real_interactions[real_interactions$consumer==con,]
for(res in unique(cur_sp$resource)){
consumer_sites <- unique(occupancy[occupancy$species==con,]$site)
resource_sites <- unique(occupancy[occupancy$species==res,]$site)
number_cooc <- sum(consumer_sites %in% resource_sites, na.rm=TRUE)
for(p in unique(intersect(consumer_sites,resource_sites))){
n <- as.data.frame(mut_nets[[p]])
local_com <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_com <- igraph::delete.vertices(local_com, which(igraph::degree(local_com,  igraph::V(local_com)) == 0))
cur_interactions <- as.data.frame(igraph::get.edgelist(local_com))
cur_interactions <- setNames(cur_interactions, c("resource","consumer"))
interactions <- dim(cur_interactions[cur_interactions$consumer==con & cur_interactions$resource==res,])[1]
if(interactions>1){
interactions <- 1
}
cur_out <- data.frame(consumer=con, resource=res, site=p, interact=interactions)
if(is.null(output_site.inter)){
output_site.inter <- cur_out
}else{
output_site.inter <- rbind(output_site.inter, cur_out)
}
}
sites_interact <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res & output_site.inter$interact==1,])[1]
cooccurring_sites <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res,])[1]
cur_proportion <- data.frame(consumer=con, resource=res, coocurring_sites=cooccurring_sites, interacting_sites=sites_interact, proportion_interact=sites_interact/cooccurring_sites)
if(is.null(output_prop.inter)){
output_prop.inter <- cur_proportion
}else{
output_prop.inter <- rbind(output_prop.inter, cur_proportion)
}
}
}
# Computing the netwwork of co-occurrences for predators
output_cooc_per_site_pred <- NULL
output_cooccurrence_pred <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='consumer',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_prey <- unique(local_com[local_com$trophic_level=='resource',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_prey=cur_potential_prey)
if(is.null(output_cooc_per_site_pred)){
output_cooc_per_site_pred <- cur_out
}else{
output_cooc_per_site_pred <- rbind(output_cooc_per_site_pred, cur_out)
}
}
total_potential <- length(unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey))
potential_prey<- unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey)
cur_out_fin <- data.frame(species=sp, total_pot_prey=total_potential, coocurring_species=potential_prey)
if(is.null(output_cooccurrence_pred)){
output_cooccurrence_pred <- cur_out_fin
}else{
output_cooccurrence_pred <- rbind(output_cooccurrence_pred, cur_out_fin)
}
}
# We now compute the netwwork of co-occurrences for resources
output_cooc_per_site_prey <- NULL
output_cooccurrence_prey <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='resource',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_pred <- unique(local_com[local_com$trophic_level=='consumer',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_pred=cur_potential_pred)
if(is.null(output_cooc_per_site_prey)){
output_cooc_per_site_prey <- cur_out
}else{
output_cooc_per_site_prey<- rbind(output_cooc_per_site_prey, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred))
potential_pred<- unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred)
cur_out_fin <- data.frame(species=sp, total_pot_pred=total_potential, coocurring_species=potential_pred)
if(is.null(output_cooccurrence_prey)){
output_cooccurrence_prey <- cur_out_fin
}else{
output_cooccurrence_prey <- rbind(output_cooccurrence_prey, cur_out_fin)
}
}
# We calculate the proportion of sites in which every pair of species co-occur
proportion_coocurrence <- NULL
for(sp in unique(output_cooc_per_site_pred$species)){
total_n_sites <- length(unique(output_cooc_per_site_pred$site))
cur_sp <- output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]
for(pot_prey in unique(cur_sp$potential_prey)){
n_cooc <- dim(cur_sp[cur_sp$potential_prey==pot_prey,])[1]
prop_cooc <- n_cooc/total_n_sites
cur_out <- data.frame(species=sp, potential_prey=pot_prey, coocurring_sites = n_cooc, prop.cooc=prop_cooc)
if(is.null(proportion_coocurrence)){
proportion_coocurrence <- cur_out
}else{
proportion_coocurrence <- rbind(proportion_coocurrence, cur_out)
}
}
}
# Proportion of species that co-occur in less than 0.1 percent of the sites
small_cooc <- dim(proportion_coocurrence[proportion_coocurrence$prop.cooc<0.1,])[1]/dim(proportion_coocurrence)[1]
proportion_coocurrence$combine = as.character(interaction(proportion_coocurrence$species, proportion_coocurrence$potential_prey))
output_prop.inter$combine = as.character(interaction(output_prop.inter$consumer, output_prop.inter$resource))
realised = proportion_coocurrence[complete.cases(match(proportion_coocurrence$combine,output_prop.inter$combine)),]
output_prop.inter
proportion_coocurrence
df <- unique(realised)
frec_cooc = as.vector(table(df$prop.cooc))
frec_cooc = frec_cooc/sum(frec_cooc)
p = frec_cooc/sum(frec_cooc)
y = rev(cumsum(rev(p)))
x = as.numeric(names(table(df$prop.cooc)))
temp_real <- data.frame(x, y)
#plot predicted vs. actual values
exponential <- nls(y ~ (exp(-x/b)), data = temp_cooc, start = list(b = 2), control=nls.control(maxiter = 1000))
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = .01), control=nls.control(maxiter = 1e3))
truncated <- nls(y ~ ( (x^-a) *(exp(-x/b))), data = temp_real, start = list(a = .0001, b = 2), control=nls.control(maxiter = 1e3))
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(power_law)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
predict(power_law)
data.frame(x, y)
power_law
truncated
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = .1), control=nls.control(maxiter = 1e3))
power_law
truncated
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = 1), control=nls.control(maxiter = 1e3))
power_law
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = -0.1), control=nls.control(maxiter = 1e3))
power_law
predict(power_law)
data.frame(x, y)
0.03125^-150
predict(power_law)
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
#plot predicted vs. actual values
exponential <- nls(y ~ (exp(-x/b)), data = temp_real, start = list(b = 2), control=nls.control(maxiter = 1000))
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(truncated)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
proportion_coocurrence
df <- unique(proportion_coocurrence)
frec_cooc = as.vector(table(df$prop.cooc))
frec_cooc = frec_cooc/sum(frec_cooc)
p = frec_cooc/sum(frec_cooc)
y = rev(cumsum(rev(p)))
x = as.numeric(names(table(df$prop.cooc)))
temp_real <- data.frame(x, y)
#plot predicted vs. actual values
exponential <- nls(y ~ (exp(-x/b)), data = temp_real, start = list(b = 2), control=nls.control(maxiter = 1000))
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = -0.1), control=nls.control(maxiter = 1e3))
truncated <- nls(y ~ ( (x^-a) *(exp(-x/b))), data = temp_real, start = list(a = .0001, b = 2), control=nls.control(maxiter = 1e3))
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(truncated)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(power_law)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3)
temp_real
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2)
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F) +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10') +
xlab('Frequency co-occurrence') + ylab('Cum. Probability') + ggtitle('Gottin PP')
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=F, method = 'gam') +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2)
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=T, method = 'gam') +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2)
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=T, method = 'gam') +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(truncated)), size=1.5,linetype=2)
truncated
exponential
power_law
df <- unique(non_realised)
frec_cooc = as.vector(table(df$prop.cooc))
frec_cooc = frec_cooc/sum(frec_cooc)
p = frec_cooc/sum(frec_cooc)
y = rev(cumsum(rev(p)))
x = as.numeric(names(table(df$prop.cooc)))
temp_real <- data.frame(x, y)
#plot predicted vs. actual values
exponential <- nls(y ~ (exp(-x/b)), data = temp_real, start = list(b = 2), control=nls.control(maxiter = 1000))
power_law <- nls(y ~ (x^-a), data = temp_real, start = list(a = -0.1), control=nls.control(maxiter = 1e3))
truncated <- nls(y ~ ( (x^-a) *(exp(-x/b))), data = temp_real, start = list(a = .0001, b = 2), control=nls.control(maxiter = 1e3))
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=T, method = 'gam') +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(truncated)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7))
truncated
exponential
power_law
ggplot(temp_real, aes(x=(x), y=(y))) +
geom_smooth(data=temp_real, aes(x=(x), y=(y)), color='darkgoldenrod3', size=1.5, se=T, method = 'gam') +
geom_point(color='darkgoldenrod3', size=3) +
geom_line(data=temp_real,aes(x=x, y=predict(exponential)), size=1.5,linetype=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7))
require(bipartite)
source("../utils.r")
########################################################################################
## The section below reads the original raw data
## network data
ant_raw <- read.csv("./raw-data/host_para_all_interactions.csv", head=T, sep=";")
mut_raw <- read.csv("./raw-data/plant_poll_all_interactions.csv", head=T, sep=";")
## metadataironmental variables (e.g., size of grassland fragments)
metadata <- read.csv("metadata.csv", head=T, sep=",")
##########
## create individual webs for each study site
ant_nets = frame2webs(ant_raw, varnames=c("Genus.Species","P1.Species.Genus","Site","P1.cells"))
mut_nets = frame2webs(mut_raw, varnames=c("P.Genus.Species","Genus.Species","Site"))
################################## ANTAGONISTIC NETWORK #############################
## Calculating species occupancy ANT_NETS
occupancy <- NULL
for(p in unique(metadata$site)){
local_com <- as.data.frame(ant_nets[[p]])
species_present <- as.data.frame(names(local_com))
species_present <- setNames(species_present, c("species"))
species_present$trophic_level <- 'consumer'
resources_present <- as.data.frame(rownames(local_com))
resources_present <- setNames(resources_present, c("species"))
resources_present$trophic_level <- 'resource'
cur_data <- data.frame(site=p,rbind(species_present,resources_present))
if(is.null(occupancy)){
occupancy <- cur_data
}else{
occupancy <- rbind(occupancy, cur_data)
}
}
number_sites <- NULL
for(sp in unique(occupancy$species)){
cur_sp <- occupancy[occupancy$species==sp,]
num_sites <- length(cur_sp$site)
cur_data <- data.frame(species=sp,trophic_level=cur_sp$trophic_level,sites=num_sites)
if(is.null(number_sites)){
number_sites <- cur_data
}else{
number_sites <- rbind(number_sites, cur_data)
}
}
number_sites <- unique(number_sites[number_sites$sites!=0,])
number_sites_pred <- number_sites[number_sites$trophic_level=='consumer',]
number_sites_prey <- number_sites[number_sites$trophic_level=='resource',]
####### ATTENTION #######
##### it was detected that networks number 7, 18, 20, 29 of ant_nets had a column without a name.
##### This column was removed from the analyses in each network respectively
##### because we couldn't know which species that column was representing
ant_nets[[7]] <- ant_nets[[7]][,-1]
ant_nets[[18]] <- ant_nets[[18]][,-1]
ant_nets[[20]] <- ant_nets[[20]][,-1]
ant_nets[[29]] <- ant_nets[[29]][,-1]
## create metaweb for each interaction type
ant_raw$dummy = 1
ant_meta = frame2webs(ant_raw, varnames=c("Genus.Species","P1.Species.Genus","dummy","P1.cells"))[[1]]
sum(ant_meta)
## Calculating total number of interactions per species (of the higher trophic level)
metaweb <- graph_from_incidence_matrix(ant_meta, directed=T, mode='out')
number_interactions_pred <- as.data.frame(igraph::degree(metaweb, V(metaweb)[which(V(metaweb)$type == TRUE)]$name, mode='in'))
number_interactions_pred <- tibble::rownames_to_column(number_interactions_pred, "species")
number_interactions_pred <- setNames(number_interactions_pred, c("species","interactions"))
number_interactions_prey <- as.data.frame(igraph::degree(metaweb, V(metaweb)[which(V(metaweb)$type == FALSE)]$name, mode='out'))
number_interactions_prey <- tibble::rownames_to_column(number_interactions_prey, "species")
number_interactions_prey <- setNames(number_interactions_prey, c("species","interactions"))
number_interactions <- rbind(number_interactions_pred, number_interactions_prey)
real_interactions <- as.data.frame(get.edgelist(metaweb))
real_interactions <- setNames(real_interactions, c("resource","consumer"))
site_interaction <- merge(number_interactions, number_sites, by="species")
# We calculate the number of times two species itneract relative to the number of times they co-occur
output_prop.inter <- NULL
output_site.inter <- NULL
for(con in unique(real_interactions$consumer)){
cur_sp <- real_interactions[real_interactions$consumer==con,]
for(res in unique(cur_sp$resource)){
consumer_sites <- unique(occupancy[occupancy$species==con,]$site)
resource_sites <- unique(occupancy[occupancy$species==res,]$site)
number_cooc <- sum(consumer_sites %in% resource_sites, na.rm=TRUE)
for(p in unique(intersect(consumer_sites,resource_sites))){
n <- as.data.frame(ant_nets[[p]])
local_com <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_com <- igraph::delete.vertices(local_com, which(igraph::degree(local_com,  igraph::V(local_com)) == 0))
cur_interactions <- as.data.frame(igraph::get.edgelist(local_com))
cur_interactions <- setNames(cur_interactions, c("resource","consumer"))
interactions <- dim(cur_interactions[cur_interactions$consumer==con & cur_interactions$resource==res,])[1]
if(interactions>1){
interactions <- 1
}
cur_out <- data.frame(consumer=con, resource=res, site=p, interact=interactions)
if(is.null(output_site.inter)){
output_site.inter <- cur_out
}else{
output_site.inter <- rbind(output_site.inter, cur_out)
}
}
sites_interact <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res & output_site.inter$interact==1,])[1]
cooccurring_sites <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res,])[1]
cur_proportion <- data.frame(consumer=con, resource=res, coocurring_sites=cooccurring_sites, interacting_sites=sites_interact, proportion_interact=sites_interact/cooccurring_sites)
if(is.null(output_prop.inter)){
output_prop.inter <- cur_proportion
}else{
output_prop.inter <- rbind(output_prop.inter, cur_proportion)
}
}
}
# Computing the netwwork of co-occurrences for predators
output_cooc_per_site_pred <- NULL
output_cooccurrence_pred <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='consumer',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_prey <- unique(local_com[local_com$trophic_level=='resource',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_prey=cur_potential_prey)
if(is.null(output_cooc_per_site_pred)){
output_cooc_per_site_pred <- cur_out
}else{
output_cooc_per_site_pred <- rbind(output_cooc_per_site_pred, cur_out)
}
}
total_potential <- length(unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey))
potential_prey<- unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey)
cur_out_fin <- data.frame(species=sp, total_pot_prey=total_potential, coocurring_species=potential_prey)
if(is.null(output_cooccurrence_pred)){
output_cooccurrence_pred <- cur_out_fin
}else{
output_cooccurrence_pred <- rbind(output_cooccurrence_pred, cur_out_fin)
}
}
# We now compute the netwwork of co-occurrences for resources
output_cooc_per_site_prey <- NULL
output_cooccurrence_prey <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='resource',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_pred <- unique(local_com[local_com$trophic_level=='consumer',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_pred=cur_potential_pred)
if(is.null(output_cooc_per_site_prey)){
output_cooc_per_site_prey <- cur_out
}else{
output_cooc_per_site_prey<- rbind(output_cooc_per_site_prey, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred))
potential_pred<- unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred)
cur_out_fin <- data.frame(species=sp, total_pot_pred=total_potential, coocurring_species=potential_pred)
if(is.null(output_cooccurrence_prey)){
output_cooccurrence_prey <- cur_out_fin
}else{
output_cooccurrence_prey <- rbind(output_cooccurrence_prey, cur_out_fin)
}
}
# We calculate the proportion of sites in which every pair of species co-occur
proportion_coocurrence <- NULL
for(sp in unique(output_cooc_per_site_pred$species)){
total_n_sites <- length(unique(output_cooc_per_site_pred$site))
cur_sp <- output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]
for(pot_prey in unique(cur_sp$potential_prey)){
n_cooc <- dim(cur_sp[cur_sp$potential_prey==pot_prey,])[1]
prop_cooc <- n_cooc/total_n_sites
cur_out <- data.frame(species=sp, potential_prey=pot_prey, coocurring_sites=n_cooc, prop.cooc=prop_cooc)
if(is.null(proportion_coocurrence)){
proportion_coocurrence <- cur_out
}else{
proportion_coocurrence <- rbind(proportion_coocurrence, cur_out)
}
}
}
proportion_coocurrence
proportion_coocurrence[1]
dim(proportion_coocurrence)[1]
dim(realised)[1]/dim(proportion_coocurrence)[1]
dim(realised)[1]
proportion_coocurrence
realised
output_prop.inter
output_prop.inter$combine = as.character(interaction(output_prop.inter$consumer, output_prop.inter$resource))
output_prop.inter$combine = as.character(interaction(output_prop.inter$consumer, output_prop.inter$resource))
