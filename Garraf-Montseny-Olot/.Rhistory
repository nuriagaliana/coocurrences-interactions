for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_pred <- unique(local_com[local_com$trophic_level=='consumer',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_pred=cur_potential_pred)
if(is.null(output_cooc_per_site_prey)){
output_cooc_per_site_prey <- cur_out
}else{
output_cooc_per_site_prey<- rbind(output_cooc_per_site_prey, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred))
potential_pred<- unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred)
cur_out_fin <- data.frame(species=sp, total_pot_pred=total_potential, coocurring_species=potential_pred)
if(is.null(output_cooccurrence_prey)){
output_cooccurrence_prey <- cur_out_fin
}else{
output_cooccurrence_prey <- rbind(output_cooccurrence_prey, cur_out_fin)
}
}
# We calculate the proportion of sites in which two species co-occur
proportion_coocurrence <- NULL
for(sp in unique(output_cooc_per_site_pred$species)){
total_n_sites <- length(unique(output_cooc_per_site_pred$site))
cur_sp <- output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]
for(pot_prey in unique(cur_sp$potential_prey)){
n_cooc <- dim(cur_sp[cur_sp$potential_prey==pot_prey,])[1]
prop_cooc <- n_cooc#/total_n_sites
cur_out <- data.frame(species=sp, potential_prey=pot_prey, prop.cooc=prop_cooc)
if(is.null(proportion_coocurrence)){
proportion_coocurrence <- cur_out
}else{
proportion_coocurrence <- rbind(proportion_coocurrence, cur_out)
}
}
}
proportion_coocurrence <- proportion_coocurrence %>%
dplyr::group_by(species) %>%
dplyr::mutate(N_alpha = sum(prop.cooc),
relative_N_alpha = sum(prop.cooc)/length(potential_prey),
number_potential_interactions = length(unique(potential_prey)))
# N_i: sum of all resources co-occurrences frequencies
proportion_coocurrence <- proportion_coocurrence %>%
dplyr:: group_by(potential_prey) %>%
dplyr::mutate(N_i = sum(prop.cooc),
relative_N_i = sum(prop.cooc)/length(species),
number_potential_interactions_resources = length(unique(species)))
ggplot(proportion_coocurrence, aes(x=number_potential_interactions_resources, y=relative_N_i)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Olot resources')
ggplot(proportion_coocurrence, aes(x=number_potential_interactions, y=relative_N_alpha)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Olot consumers')
cur_dataset <- 'montseny'
## The section below reads the original raw data
excel <- loadWorkbook(paste0("./raw-data/",cur_dataset,".xlsx"))
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
occupancy <- NULL
for(p in unique(sheet_names)[-c(1,20)]){ # Check the number of plots in each dataset. We remove 1 and 16 here because correspond to INFO and metaweb
n <- sheet_list[[p]]
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
if(cur_dataset == 'montseny'){
rownames(n) <- paste0('Plant-', rownames(n))
colnames(n) <- paste0('Pol-', colnames(n))
}
local_com <- n
species_present <- names(local_com)
species_present <- as.data.frame(names(local_com))
species_present <- setNames(species_present, c("species"))
species_present$trophic_level <- 'consumer'
resources_present <- as.data.frame(rownames(local_com))
resources_present <- setNames(resources_present, c("species"))
resources_present$trophic_level <- 'resource'
cur_data <- data.frame(site=p,rbind(species_present,resources_present))
if(is.null(occupancy)){
occupancy <- cur_data
}else{
occupancy <- rbind(occupancy, cur_data)
}
}
number_sites <- NULL
for(sp in unique(occupancy$species)){
cur_sp <- occupancy[occupancy$site!='metaweb' & occupancy$species==sp,]
num_sites <- length(cur_sp$site)
cur_data <- data.frame(species=sp,trophic_level=cur_sp$trophic_level,sites=num_sites)
if(is.null(number_sites)){
number_sites <- cur_data
}else{
number_sites <- rbind(number_sites, cur_data)
}
}
number_sites <- number_sites[number_sites$sites!=0,]
number_sites_pred <- number_sites[number_sites$trophic_level=='consumer',]
number_sites_prey <- number_sites[number_sites$trophic_level=='resource',]
n.sites <- length(sheet_list) - 1
first_index <- 2
if(cur_dataset == 'garraf-pp-2'){
n.sites <- length(sheet_list)
first_index <- 1
}
first <- TRUE
for(i in first_index:n.sites){
n <- sheet_list[[i]]
# row.names(n) <- n$Col1
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
if(cur_dataset == 'garraf-pp-2'){
n <- t(n)
}
if(cur_dataset == 'montseny'){
rownames(n) <- paste0('Plant-', rownames(n))
colnames(n) <- paste0('Pol-', colnames(n))
}
local_net <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_net <- igraph::delete.vertices(local_net, which(igraph::degree(local_net, igraph::V(local_net)) == 0))
if(first){
metaweb <- local_net
first <- FALSE
}else{
metaweb <- igraph::union(metaweb, local_net)
igraph::V(metaweb)$type <- igraph::V(metaweb)$type_1
igraph::V(metaweb)$type[which(!is.na(igraph::V(metaweb)$type_2))] <- igraph::V(metaweb)$type_2[which(! is.na(igraph::V(metaweb)$type_2))]
}
}
real_interactions <- as.data.frame(igraph::get.edgelist(metaweb))
real_interactions <- setNames(real_interactions, c("resource","consumer"))
# We extract the total number of interactions of each species from the metaweb
number_interactions_pred <- as.data.frame(igraph::degree(metaweb, igraph::V(metaweb)[which(igraph::V(metaweb)$type == TRUE)]$name, mode='in'))
number_interactions_pred <- tibble::rownames_to_column(number_interactions_pred, "species")
number_interactions_pred <- setNames(number_interactions_pred, c("species","interactions"))
number_interactions_prey <- as.data.frame(igraph::degree(metaweb, igraph::V(metaweb)[which(igraph::V(metaweb)$type == FALSE)]$name, mode='out'))
number_interactions_prey <- tibble::rownames_to_column(number_interactions_prey, "species")
number_interactions_prey <- setNames(number_interactions_prey, c("species","interactions"))
number_interactions <- rbind(number_interactions_pred, number_interactions_prey)
site_interaction <- merge(number_interactions, number_sites, by="species")
# We calculate the number of times two species itneract relative to the number of times they co-occur
output_prop.inter <- NULL
output_site.inter <- NULL
for(con in unique(real_interactions$consumer)){
cur_sp <- real_interactions[real_interactions$consumer==con,]
for(res in unique(cur_sp$resource)){
consumer_sites <- unique(occupancy[occupancy$species==con,]$site)
resource_sites <- unique(occupancy[occupancy$species==res,]$site)
number_cooc <- sum(consumer_sites %in% resource_sites, na.rm=TRUE)
for(p in unique(intersect(consumer_sites,resource_sites))){
n <- sheet_list[[p]]
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
local_com <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_com <- igraph::delete.vertices(local_com, which(igraph::degree(local_com,  igraph::V(local_com)) == 0))
cur_interactions <- as.data.frame(igraph::get.edgelist(local_com))
cur_interactions <- setNames(cur_interactions, c("resource","consumer"))
interactions <- dim(cur_interactions[cur_interactions$consumer==con & cur_interactions$resource==res,])[1]
if(interactions>1){
interactions <- 1
}
cur_out <- data.frame(consumer=con, resource=res, site=p, interact=interactions)
if(is.null(output_site.inter)){
output_site.inter <- cur_out
}else{
output_site.inter <- rbind(output_site.inter, cur_out)
}
}
sites_interact <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res & output_site.inter$interact==1,])[1]
cooccurring_sites <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res,])[1]
cur_proportion <- data.frame(consumer=con, resource=res, coocurring_sites=cooccurring_sites, interacting_sites=sites_interact, proportion_interact=sites_interact/cooccurring_sites)
if(is.null(output_prop.inter)){
output_prop.inter <- cur_proportion
}else{
output_prop.inter <- rbind(output_prop.inter, cur_proportion)
}
}
}
# We now compute the netwwork of co-occurrences for consumers
output_cooc_per_site_pred <- NULL
output_cooccurrence_pred <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='consumer',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_prey <- unique(local_com[local_com$trophic_level=='resource',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_prey=cur_potential_prey)
if(is.null(output_cooc_per_site_pred)){
output_cooc_per_site_pred <- cur_out
}else{
output_cooc_per_site_pred<- rbind(output_cooc_per_site_pred, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey))
potential_prey<- unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey)
cur_out_fin <- data.frame(species=sp, total_pot_prey=total_potential, coocurring_species=potential_prey)
if(is.null(output_cooccurrence_pred)){
output_cooccurrence_pred <- cur_out_fin
}else{
output_cooccurrence_pred <- rbind(output_cooccurrence_pred, cur_out_fin)
}
}
# We now compute the netwwork of co-occurrences for resources
output_cooc_per_site_prey <- NULL
output_cooccurrence_prey <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='resource',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_pred <- unique(local_com[local_com$trophic_level=='consumer',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_pred=cur_potential_pred)
if(is.null(output_cooc_per_site_prey)){
output_cooc_per_site_prey <- cur_out
}else{
output_cooc_per_site_prey<- rbind(output_cooc_per_site_prey, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred))
potential_pred<- unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred)
cur_out_fin <- data.frame(species=sp, total_pot_pred=total_potential, coocurring_species=potential_pred)
if(is.null(output_cooccurrence_prey)){
output_cooccurrence_prey <- cur_out_fin
}else{
output_cooccurrence_prey <- rbind(output_cooccurrence_prey, cur_out_fin)
}
}
# We calculate the proportion of sites in which two species co-occur
proportion_coocurrence <- NULL
for(sp in unique(output_cooc_per_site_pred$species)){
total_n_sites <- length(unique(output_cooc_per_site_pred$site))
cur_sp <- output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]
for(pot_prey in unique(cur_sp$potential_prey)){
n_cooc <- dim(cur_sp[cur_sp$potential_prey==pot_prey,])[1]
prop_cooc <- n_cooc#/total_n_sites
cur_out <- data.frame(species=sp, potential_prey=pot_prey, prop.cooc=prop_cooc)
if(is.null(proportion_coocurrence)){
proportion_coocurrence <- cur_out
}else{
proportion_coocurrence <- rbind(proportion_coocurrence, cur_out)
}
}
}
proportion_coocurrence <- proportion_coocurrence %>%
dplyr::group_by(species) %>%
dplyr::mutate(N_alpha = sum(prop.cooc),
relative_N_alpha = sum(prop.cooc)/length(potential_prey),
number_potential_interactions = length(unique(potential_prey)))
# N_i: sum of all resources co-occurrences frequencies
proportion_coocurrence <- proportion_coocurrence %>%
dplyr:: group_by(potential_prey) %>%
dplyr::mutate(N_i = sum(prop.cooc),
relative_N_i = sum(prop.cooc)/length(species),
number_potential_interactions_resources = length(unique(species)))
ggplot(proportion_coocurrence, aes(x=number_potential_interactions_resources, y=relative_N_i)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Montseny resources')
ggplot(proportion_coocurrence, aes(x=number_potential_interactions, y=relative_N_alpha)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Montseny consumers')
cur_dataset <- 'garraf-pp-2'
## The section below reads the original raw data
excel <- loadWorkbook(paste0("./raw-data/",cur_dataset,".xlsx"))
# get sheet names
sheet_names <- getSheets(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorksheet(object=excel, .sheet)})
occupancy <- NULL
for(p in unique(sheet_names)){ # Check the number of plots in each dataset. We remove 1 and 16 here because correspond to INFO and metaweb
n <- sheet_list[[p]]
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
if(cur_dataset == 'montseny'){
rownames(n) <- paste0('Pol-', rownames(n))
colnames(n) <- paste0('Plant-', colnames(n))
}
local_com <- n
species_present <- names(local_com)
species_present <- as.data.frame(rownames(local_com))
species_present <- setNames(species_present, c("species"))
species_present$trophic_level <- 'consumer'
resources_present <- as.data.frame(names(local_com))
resources_present <- setNames(resources_present, c("species"))
resources_present$trophic_level <- 'resource'
cur_data <- data.frame(site=p,rbind(species_present,resources_present))
if(is.null(occupancy)){
occupancy <- cur_data
}else{
occupancy <- rbind(occupancy, cur_data)
}
}
number_sites <- NULL
for(sp in unique(occupancy$species)){
cur_sp <- occupancy[occupancy$site!='metaweb' & occupancy$species==sp,]
num_sites <- length(cur_sp$site)
cur_data <- data.frame(species=sp,trophic_level=cur_sp$trophic_level,sites=num_sites)
if(is.null(number_sites)){
number_sites <- cur_data
}else{
number_sites <- rbind(number_sites, cur_data)
}
}
number_sites <- number_sites[number_sites$sites!=0,]
number_sites_pred <- number_sites[number_sites$trophic_level=='consumer',]
number_sites_prey <- number_sites[number_sites$trophic_level=='resource',]
n.sites <- length(sheet_list) - 1
first_index <- 2
if(cur_dataset == 'garraf-pp-2'){
n.sites <- length(sheet_list)
first_index <- 1
}
first <- TRUE
for(i in first_index:n.sites){
n <- sheet_list[[i]]
# row.names(n) <- n$Col1
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
if(cur_dataset == 'garraf-pp-2'){
n <- t(n)
}
if(cur_dataset == 'montseny'){
rownames(n) <- paste0('Plant-', rownames(n))
colnames(n) <- paste0('Pol-', colnames(n))
}
local_net <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_net <- igraph::delete.vertices(local_net, which(igraph::degree(local_net, igraph::V(local_net)) == 0))
if(first){
metaweb <- local_net
first <- FALSE
}else{
metaweb <- igraph::union(metaweb, local_net)
igraph::V(metaweb)$type <- igraph::V(metaweb)$type_1
igraph::V(metaweb)$type[which(!is.na(igraph::V(metaweb)$type_2))] <- igraph::V(metaweb)$type_2[which(! is.na(igraph::V(metaweb)$type_2))]
}
}
real_interactions <- as.data.frame(igraph::get.edgelist(metaweb))
real_interactions <- setNames(real_interactions, c("resource","consumer"))
# We extract the total number of interactions of each species from the metaweb
number_interactions_pred <- as.data.frame(igraph::degree(metaweb, igraph::V(metaweb)[which(igraph::V(metaweb)$type == TRUE)]$name, mode='in'))
number_interactions_pred <- tibble::rownames_to_column(number_interactions_pred, "species")
number_interactions_pred <- setNames(number_interactions_pred, c("species","interactions"))
number_interactions_prey <- as.data.frame(igraph::degree(metaweb, igraph::V(metaweb)[which(igraph::V(metaweb)$type == FALSE)]$name, mode='out'))
number_interactions_prey <- tibble::rownames_to_column(number_interactions_prey, "species")
number_interactions_prey <- setNames(number_interactions_prey, c("species","interactions"))
number_interactions <- rbind(number_interactions_pred, number_interactions_prey)
site_interaction <- merge(number_interactions, number_sites, by="species")
# We calculate the number of times two species itneract relative to the number of times they co-occur
output_prop.inter <- NULL
output_site.inter <- NULL
for(con in unique(real_interactions$consumer)){
cur_sp <- real_interactions[real_interactions$consumer==con,]
for(res in unique(cur_sp$resource)){
consumer_sites <- unique(occupancy[occupancy$species==con,]$site)
resource_sites <- unique(occupancy[occupancy$species==res,]$site)
number_cooc <- sum(consumer_sites %in% resource_sites, na.rm=TRUE)
for(p in unique(intersect(consumer_sites,resource_sites))){
n <- sheet_list[[p]]
row.names(n) <- n[,1]
n <- n[-1]
n[n!=0] <- 1
local_com <- igraph::graph_from_incidence_matrix(n, directed = T, mode='out')
local_com <- igraph::delete.vertices(local_com, which(igraph::degree(local_com,  igraph::V(local_com)) == 0))
cur_interactions <- as.data.frame(igraph::get.edgelist(local_com))
cur_interactions <- setNames(cur_interactions, c("resource","consumer"))
interactions <- dim(cur_interactions[cur_interactions$consumer==con & cur_interactions$resource==res,])[1]
if(interactions>1){
interactions <- 1
}
cur_out <- data.frame(consumer=con, resource=res, site=p, interact=interactions)
if(is.null(output_site.inter)){
output_site.inter <- cur_out
}else{
output_site.inter <- rbind(output_site.inter, cur_out)
}
}
sites_interact <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res & output_site.inter$interact==1,])[1]
cooccurring_sites <- dim(output_site.inter[output_site.inter$consumer==con & output_site.inter$resource==res,])[1]
cur_proportion <- data.frame(consumer=con, resource=res, coocurring_sites=cooccurring_sites, interacting_sites=sites_interact, proportion_interact=sites_interact/cooccurring_sites)
if(is.null(output_prop.inter)){
output_prop.inter <- cur_proportion
}else{
output_prop.inter <- rbind(output_prop.inter, cur_proportion)
}
}
}
# We now compute the netwwork of co-occurrences for consumers
output_cooc_per_site_pred <- NULL
output_cooccurrence_pred <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='consumer',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_prey <- unique(local_com[local_com$trophic_level=='resource',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_prey=cur_potential_prey)
if(is.null(output_cooc_per_site_pred)){
output_cooc_per_site_pred <- cur_out
}else{
output_cooc_per_site_pred<- rbind(output_cooc_per_site_pred, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey))
potential_prey<- unique(output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]$potential_prey)
cur_out_fin <- data.frame(species=sp, total_pot_prey=total_potential, coocurring_species=potential_prey)
if(is.null(output_cooccurrence_pred)){
output_cooccurrence_pred <- cur_out_fin
}else{
output_cooccurrence_pred <- rbind(output_cooccurrence_pred, cur_out_fin)
}
}
# We now compute the netwwork of co-occurrences for resources
output_cooc_per_site_prey <- NULL
output_cooccurrence_prey <- NULL
for(sp in unique(occupancy[occupancy$trophic_level=='resource',]$species)){
sp_sites <- unique(occupancy[occupancy$species==sp,]$site)
for(sit in unique(sp_sites)){
local_com <- occupancy[occupancy$site==sit,]
cur_potential_pred <- unique(local_com[local_com$trophic_level=='consumer',]$species)
cur_out <- data.frame(site=sit, species=sp, potential_pred=cur_potential_pred)
if(is.null(output_cooc_per_site_prey)){
output_cooc_per_site_prey <- cur_out
}else{
output_cooc_per_site_prey<- rbind(output_cooc_per_site_prey, cur_out)
}
}
# We calculate the total number of co-occurring resources
total_potential <- length(unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred))
potential_pred<- unique(output_cooc_per_site_prey[output_cooc_per_site_prey$species==sp,]$potential_pred)
cur_out_fin <- data.frame(species=sp, total_pot_pred=total_potential, coocurring_species=potential_pred)
if(is.null(output_cooccurrence_prey)){
output_cooccurrence_prey <- cur_out_fin
}else{
output_cooccurrence_prey <- rbind(output_cooccurrence_prey, cur_out_fin)
}
}
# We calculate the proportion of sites in which two species co-occur
proportion_coocurrence <- NULL
for(sp in unique(output_cooc_per_site_pred$species)){
total_n_sites <- length(unique(output_cooc_per_site_pred$site))
cur_sp <- output_cooc_per_site_pred[output_cooc_per_site_pred$species==sp,]
for(pot_prey in unique(cur_sp$potential_prey)){
n_cooc <- dim(cur_sp[cur_sp$potential_prey==pot_prey,])[1]
prop_cooc <- n_cooc#/total_n_sites
cur_out <- data.frame(species=sp, potential_prey=pot_prey, prop.cooc=prop_cooc)
if(is.null(proportion_coocurrence)){
proportion_coocurrence <- cur_out
}else{
proportion_coocurrence <- rbind(proportion_coocurrence, cur_out)
}
}
}
proportion_coocurrence <- proportion_coocurrence %>%
dplyr::group_by(species) %>%
dplyr::mutate(N_alpha = sum(prop.cooc),
relative_N_alpha = sum(prop.cooc)/length(potential_prey),
number_potential_interactions = length(unique(potential_prey)))
# N_i: sum of all resources co-occurrences frequencies
proportion_coocurrence <- proportion_coocurrence %>%
dplyr:: group_by(potential_prey) %>%
dplyr::mutate(N_i = sum(prop.cooc),
relative_N_i = sum(prop.cooc)/length(species),
number_potential_interactions_resources = length(unique(species)))
ggplot(proportion_coocurrence, aes(x=number_potential_interactions_resources, y=relative_N_i)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Garraf PP2 resources')
ggplot(proportion_coocurrence, aes(x=number_potential_interactions, y=relative_N_alpha)) +
geom_point(size=3)+ geom_smooth(method = 'loess')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"), axis.text=element_text(size=22),
axis.title=element_text(size= 24 ,face="bold"), plot.title = element_text(size=20),
legend.position = 'none',
panel.background = element_rect(fill = "white", color = 'black', size = 1.7)) +
theme(plot.margin = margin(t=5.5, r=10, b=5.5, l=5.5, "pt")) +
xlab("Potential interactions") + ylab("Mean frequency of co-occurrence") + ggtitle('Garraf PP2 consumers')
citation()
